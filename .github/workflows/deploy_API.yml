# This workflow will build and push a .NET Core app to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and DOTNET_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy Vehiculo semana 09

env:
  AZURE_WEBAPP_NAME: apidevehiculo-hsc8dhb6cxfwb7cw.canadacentral-01.azurewebsites.net   # Nombre real de tu Azure Web App (debe coincidir con el publish profile)
  AZURE_WEBAPP_PACKAGE_PATH: 'Pelicula.API/API'     # Ruta al proyecto API
  DOTNET_VERSION: '8.0'                  # VersiÃ³n .NET 8.0 segÃºn tu proyecto

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'Semana 09-Documentos/Vehiculo.API/BD/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          cd "Pelicula.API/API"
          dotnet restore "Abstracciones/Abstracciones.csproj"
          dotnet restore "DA/DA.csproj"
          dotnet restore "DA.EF/DA.EF.csproj"
          dotnet restore "Flujo/Flujo.csproj"
          dotnet restore "Helpers/Helpers.csproj"
          dotnet restore "Reglas/Reglas.csproj"
          dotnet restore "Servicios/Servicios.csproj"
          dotnet restore "API/API.csproj"

      - name: Build with dotnet (excluding BD project)
        run: |
          cd "Pelicula.API/API"
          dotnet build "Abstracciones/Abstracciones.csproj" --configuration Release --no-restore
          dotnet build "DA/DA.csproj" --configuration Release --no-restore
          dotnet build "DA.EF/DA.EF.csproj" --configuration Release --no-restore
          dotnet build "Flujo/Flujo.csproj" --configuration Release --no-restore
          dotnet build "Helpers/Helpers.csproj" --configuration Release --no-restore
          dotnet build "Reglas/Reglas.csproj" --configuration Release --no-restore
          dotnet build "Servicios/Servicios.csproj" --configuration Release --no-restore
          dotnet build "API/API.csproj" --configuration Release --no-restore

      - name: Run tests (excluding BD project)
        run: |
          cd "Pelicula.API/API"
          dotnet test "API/API.csproj" --no-restore --verbosity normal --configuration Release || echo "No tests found or test execution failed"

      - name: dotnet publish
        run: dotnet publish "Pelicula.API/API/API.csproj" -c Release -o ./publish --no-restore

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ./publish

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .
          respect-funcignore: true
